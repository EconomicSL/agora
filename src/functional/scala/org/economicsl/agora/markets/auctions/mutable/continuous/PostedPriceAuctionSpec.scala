/*
Copyright 2016 ScalABM

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
package org.economicsl.agora.markets.auctions.mutable.continuous

import org.economicsl.agora.markets.auctions.matching.FindBestPricedOrder
import org.economicsl.agora.markets.auctions.mutable.orderbooks.{SortedAskOrderBook, SortedBidOrderBook}
import org.economicsl.agora.markets.auctions.pricing.WeightedAveragePricing
import org.economicsl.agora.markets.tradables.TestTradable
import org.economicsl.agora.RandomOrderGenerator
import org.apache.commons.math3.{distribution, random, stat}
import org.economicsl.agora.markets.tradables.orders.ask.LimitAskOrder
import org.economicsl.agora.markets.tradables.orders.bid.LimitBidOrder
import org.scalatest.{FlatSpec, Matchers}


class PostedPriceAuctionSpec extends FlatSpec with Matchers {

  // Define a source for randomly generated orders...
  val trader: RandomOrderGenerator = {

    val seed = 42
    val prng = new random.MersenneTwister(seed)

    // specify the sampling distribution for prices (could use different distributions for ask and bid prices...)
    val (minAskPrice, maxAskPrice) = (50, 200)
    val askPriceDistribution = new distribution.UniformRealDistribution(prng, minAskPrice, maxAskPrice)

    val (minBidPrice, maxBidPrice) = (1, 150)
    val bidPriceDistribution = new distribution.UniformRealDistribution(prng, minBidPrice, maxBidPrice)

    // specify the sampling distribution for quantities could use different distributions for ask and bid quantities...)
    val (minQuantity, maxQuantity) = (1, 1)
    val askQuantityDistribution = new distribution.UniformIntegerDistribution(prng, minQuantity, maxQuantity)
    val bidQuantityDistribution = new distribution.UniformIntegerDistribution(prng, minQuantity, maxQuantity)

    RandomOrderGenerator(prng, askPriceDistribution, askQuantityDistribution, bidPriceDistribution, bidQuantityDistribution)

  }

  // define order books
  val tradable = TestTradable()
  val askOrderBook = SortedAskOrderBook[LimitAskOrder](tradable)
  val bidOrderBook = SortedBidOrderBook[LimitBidOrder](tradable)

  // define matching rules
  val askOrderMatchingRule = FindBestPricedOrder[LimitAskOrder, LimitBidOrder]
  val bidOrderMatchingRule = FindBestPricedOrder[LimitBidOrder, LimitAskOrder]

  // define pricing rules
  val weight = 0.5
  val askOrderPricingRule = WeightedAveragePricing(weight)
  val bidOrderPricingRule = WeightedAveragePricing(weight)

  val auction = TwoSidedPostedPriceAuction(askOrderBook, askOrderMatchingRule, askOrderPricingRule,
                                           bidOrderBook, bidOrderMatchingRule, bidOrderPricingRule)

  "Average price of a Fill generated by a twosided.auctions.continuous.PostedPriceAuction" should "be (close to!) 100" in {

    // generate a sufficiently large number of random orders...
    val numberOrders = 1000000
    val askOrderProbability = 0.5
    val orders = for { i <- 1 to numberOrders } yield trader.nextLimitOrder(askOrderProbability, tradable)

    // ...feed the orders into the auction mechanism...
    val fills = orders.flatMap {
      case Left(limitAskOrder) => auction.fill(limitAskOrder)
      case Right(limitBidOrder) => auction.fill(limitBidOrder)
    }

    // ...then collect and summarize the results...
    val summaryStatistics = new stat.descriptive.SummaryStatistics()
    fills.foreach(fill => summaryStatistics.addValue(fill.price.toDouble))
    val actualAverageFillPrice = summaryStatistics.getMean.round // probably will not need to round when price is Double!

    // ...print to screen for reference...
    println(summaryStatistics.toString)

    // expected average fill price can be computed as follows...
    val minAskPrice = trader.askPriceDistribution.getSupportLowerBound
    val maxBidPrice = trader.bidPriceDistribution.getSupportUpperBound
    val expectedAverageFillPrice = 0.5 * (minAskPrice + maxBidPrice)

    actualAverageFillPrice should be(expectedAverageFillPrice)

  }

}
