/*
Copyright 2016 ScalABM

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
package org.economicsl.agora.markets.auctions.mutable.continuous

import java.util.UUID

import org.apache.commons.math3.distribution
import org.economicsl.agora.markets.tradables.{Price, TestTradable}
import org.scalatest.{FlatSpec, Matchers}

import scala.util.Random


class BuyersBidDoubleAuctionTradingRulesSpec extends FlatSpec with Matchers {

  "Limit price generated by a buyer's equilibrium trading rule" should "be half of its reservation value" in {

    val prng = new Random()

    val buyerValuations = new distribution.UniformRealDistribution()
    val issuer = UUID.randomUUID()
    val reservationValue = prng.nextDouble()
    val sellerValuations = new distribution.UniformRealDistribution()

    val tradingRule = {
      new BuyersBidDoubleAuctionSimulation.BuyerEquilibriumTradingRule(buyerValuations, issuer, reservationValue, sellerValuations)
    }

    val tradable = TestTradable()
    val expectedValue = 0.5 * reservationValue // analytic result for uniform valuation distributions
    tradingRule(tradable).limit.value === expectedValue +- 1e-2

  }

}
