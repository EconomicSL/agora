/*
Copyright 2016 ScalABM

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
/*
Copyright 2016 ScalABM

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
package org.economicsl.agora.markets.auctions.concurrent.continuous

import org.economicsl.agora.markets.Fill
import org.economicsl.agora.markets.auctions.concurrent.orderbooks.{AskOrderBook, GenOrderBook, ParAskOrderBook}
import org.economicsl.agora.markets.tradables.orders.Persistent
import org.economicsl.agora.markets.tradables.orders.ask.AskOrder
import org.economicsl.agora.markets.tradables.orders.bid.BidOrder
import org.economicsl.agora.markets.tradables.{LimitPrice, Price, Quantity, Tradable}


/** Trait defining the interface for a `SellerPostedPriceAuction`.
  *
  * @tparam B the type of `BidOrder` instances that should be filled by the `SellerPostedPriceAuction`.
  * @tparam A the type of `AskOrder` instances that are stored in the `AskOrderBook`.
  */
abstract class SellerPostedPriceAuction[B <: BidOrder with LimitPrice with Quantity,
                                        AB <: GenOrderBook[A], A <: AskOrder with LimitPrice with Persistent with Quantity]
                                       (matchingRule: (B, AB) => Option[A], pricingRule: (B, A) => Price)
  extends PostedPriceAuction[B, A] {

  final def fill(order: B): Option[Fill] = {
    val matchingOrders = matchingRule(order, orderBook) // eventually this will return an iterable?
    matchingOrders.foreach(matchingOrder => orderBook.remove(matchingOrder.issuer)) // SIDE EFFECT!
    matchingOrders.map { matchingOrder =>
      val price = pricingRule(order, matchingOrder)
      val quantity = math.min(order.quantity, matchingOrder.quantity) // not dealing with residual orders!
      performance.addValue(surplus(matchingOrder, order))  // SIDE EFFECT!
      new Fill(matchingOrder, order, price, quantity)
    }
  }

  /** Return the surplus generated by a trade.
    *
    * @param askOrder an instance of `AskOrder with LimitPrice with Quantity`.
    * @param bidOrder an instance of `BidOrder with LimitPrice with Quantity`.
    * @return surplus as measured by the difference between `bidOrder` and `askOrder` `limit` prices.
    */
  protected def surplus(askOrder: A, bidOrder: B): Double = bidOrder.limit.value - askOrder.limit.value

}


object SellerPostedPriceAuction {

  /** Create an instance of a `SellerPostedPriceAuction`.
    *
    * @param matchingRule
    * @param pricingRule
    * @tparam B
    * @tparam A
    * @return an instance of a `SellerPostedPriceAuction`.
    */
  def apply[B <: BidOrder with LimitPrice with Quantity, A <: AskOrder with LimitPrice with Persistent with Quantity]
           (matchingRule: (B, AskOrderBook[A]) => Option[A], pricingRule: (B, A) => Price, tradable: Tradable)
           : SellerPostedPriceAuction[B, AskOrderBook[A], A] = {

    new SellerPostedPriceAuction(matchingRule, pricingRule) {
      protected val orderBook: AskOrderBook[A] = AskOrderBook(tradable)
    }

  }

  /** Create an instance of a `SellerPostedPriceAuction`.
    *
    * @param matchingRule
    * @param pricingRule
    * @tparam B
    * @tparam A
    * @return an instance of a `SellerPostedPriceAuction`.
    */
  def apply[B <: BidOrder with LimitPrice with Quantity, A <: AskOrder with LimitPrice with Persistent with Quantity]
           (matchingRule: (B, ParAskOrderBook[A]) => Option[A], pricingRule: (B, A) => Price, tradable: Tradable)
           : SellerPostedPriceAuction[B, ParAskOrderBook[A], A] = {

    new SellerPostedPriceAuction(matchingRule, pricingRule) {
      protected val orderBook: ParAskOrderBook[A] = ParAskOrderBook(tradable)
    }

  }

}
