/*
Copyright 2016 ScalABM

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
package org.economicsl.agora.markets.auctions.mutable.continuous

import org.economicsl.agora.markets.Fill
import org.economicsl.agora.markets.auctions.mutable.orderbooks
import org.economicsl.agora.markets.tradables.{LimitPrice, Price, Quantity}
import org.economicsl.agora.markets.tradables.orders.{Order, Persistent}
import org.apache.commons.math3.stat
import org.apache.commons.math3.stat.descriptive.StatisticalSummary


/** Class defining a `PostedPriceAuction`.
  *
  * @param orderBook
  * @param matchingRule
  * @param pricingRule
  * @tparam O1 the type of `Order` instances that should be filled by the `PostedPriceAuction`.
  * @tparam OB the type of `OrderBook` used to store the potential matches.
  * @tparam O2 the type of `Order` instances that are potential matches and are stored in the `OrderBook`.
  */
class PostedPriceAuction[O1 <: Order with LimitPrice with Quantity, OB <: orderbooks.OrderBook[O2], O2 <: Order with LimitPrice with Persistent with Quantity]
                        (orderBook: OB, matchingRule: (O1, OB) => Option[O2], pricingRule: (O1, O2) => Price) {

  final def cancel(order: O2): Option[O2] = orderBook.remove(order.issuer)

  final def clear(): Unit = orderBook.clear()

  final def fill(order: O1): Option[Fill] = {
    val matchingOrders = matchingRule(order, orderBook) // eventually this will return an iterable!
    matchingOrders.foreach(matchingOrder => orderBook.remove(matchingOrder.issuer)) // SIDE EFFECT!
    matchingOrders.map { matchingOrder =>
      val price = pricingRule(order, matchingOrder)
      val quantity = math.min(order.quantity, matchingOrder.quantity) // not dealing with residual orders!
      performance.addValue(tradeSurplus(order, matchingOrder))  // SIDE EFFECT!
      new Fill(order.issuer, matchingOrder.issuer, price, quantity, orderBook.tradable)
    }
  }

  final def place(order: O2): Unit = orderBook.add(order)

  /** Summary of auction performance.
    *
    * @return an immutable summary of the underlying performance data.
    * @note not convinced that this method should be public (i.e., not sure it should be accessible to model agents).
    */
  final def performanceSummary: StatisticalSummary = performance.getSummary

  /** Storage container for data on auction performance
    *
    * @note auction performance is measured using trade surplus.
    */
  protected val performance: stat.descriptive.SummaryStatistics = new stat.descriptive.SummaryStatistics()

  /** Return the surplus generated by a trade between an incoming and an existing order.
    *
    * @param incoming
    * @param existing
    * @return surplus as measured by the magnitude of the difference between `incoming` and `existing` `limit` prices.
    */
  protected def tradeSurplus(incoming: O1, existing: O2): Double = {
    math.abs(incoming.limit.value - existing.limit.value)
  }

}


object PostedPriceAuction {

  def apply[O1 <: Order with LimitPrice with Quantity, OB <: orderbooks.OrderBook[O2], O2 <: Order with LimitPrice with Persistent with Quantity]
           (orderBook: OB, matchingRule: (O1, OB) => Option[O2], pricingRule: (O1, O2) => Price)
           : PostedPriceAuction[O1, OB, O2] = {
    new PostedPriceAuction(orderBook, matchingRule, pricingRule)
  }

}